/*
 * Copyright 2019 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

export class BridgeOptions {

  constructor();
  constructor(obj: BridgeOptions);
  /**
   * Sets the list of inbound permitted options.
   * @param inboundPermitted the list to use, must not be {@link null}. This method use the direct list reference
   *                          (and doesn't create a copy).
   * @return the current {@link BridgeOptions}.
   * 
   */
  getInboundPermitteds(): PermittedOptions;

  /**
   * Sets the list of inbound permitted options.
   * @param inboundPermitted the list to use, must not be {@link null}. This method use the direct list reference
   *                          (and doesn't create a copy).
   * @return the current {@link BridgeOptions}.
   * 
   */
  setInboundPermitteds(inboundPermitteds: PermittedOptions): BridgeOptions;

  /**
   * Sets the list of inbound permitted options.
   * @param inboundPermitted the list to use, must not be {@link null}. This method use the direct list reference
   *                          (and doesn't create a copy).
   * @return the current {@link BridgeOptions}.
   * 
   */
  addInboundPermitted(inboundPermitteds: PermittedOptions): BridgeOptions;

  /**
   * Sets the list of outbound permitted options.
   * @param outboundPermitted the list to use, must not be {@link null}. This method use the direct list reference
   *                          (and doesn't create a copy).
   * @return the current {@link BridgeOptions}.
   * 
   */
  getOutboundPermitteds(): PermittedOptions;

  /**
   * Sets the list of outbound permitted options.
   * @param outboundPermitted the list to use, must not be {@link null}. This method use the direct list reference
   *                          (and doesn't create a copy).
   * @return the current {@link BridgeOptions}.
   * 
   */
  setOutboundPermitteds(outboundPermitteds: PermittedOptions): BridgeOptions;

  /**
   * Sets the list of outbound permitted options.
   * @param outboundPermitted the list to use, must not be {@link null}. This method use the direct list reference
   *                          (and doesn't create a copy).
   * @return the current {@link BridgeOptions}.
   * 
   */
  addOutboundPermitted(outboundPermitteds: PermittedOptions): BridgeOptions;
}

export class PermittedOptions {

  constructor();
  constructor(obj: PermittedOptions);
  /**
   * The exact address the message is being sent to. If you want to allow messages based on
   *  an exact address you use this field.
   * @param address the address
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getAddress(): string;

  /**
   * The exact address the message is being sent to. If you want to allow messages based on
   *  an exact address you use this field.
   * @param address the address
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setAddress(address: string): PermittedOptions;

  /**
   * A regular expression that will be matched against the address. If you want to allow messages
   *  based on a regular expression you use this field. If the {@link #setAddress} value is specified
   *  this will be ignored.
   * @param addressRegex the address regex
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getAddressRegex(): string;

  /**
   * A regular expression that will be matched against the address. If you want to allow messages
   *  based on a regular expression you use this field. If the {@link #setAddress} value is specified
   *  this will be ignored.
   * @param addressRegex the address regex
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setAddressRegex(addressRegex: string): PermittedOptions;

  /**
   * This allows you to allow messages based on their structure. Any fields in the match must exist in the
   *  message with the same values for them to be allowed. This currently only works with JSON messages.
   * @param match the match json object
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getMatch(): { [key: string]: any };

  /**
   * This allows you to allow messages based on their structure. Any fields in the match must exist in the
   *  message with the same values for them to be allowed. This currently only works with JSON messages.
   * @param match the match json object
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setMatch(match: { [key: string]: any }): PermittedOptions;

  /**
   * Declare a specific authority that user must have in order to allow messages
   * @param requiredAuthority the authority
   * @return a reference to this, so the API can be used fluently
   * 
   */
  getRequiredAuthority(): string;

  /**
   * Declare a specific authority that user must have in order to allow messages
   * @param requiredAuthority the authority
   * @return a reference to this, so the API can be used fluently
   * 
   */
  setRequiredAuthority(requiredAuthority: string): PermittedOptions;
}
